/*To access database directly, put the following into terminal, granted you have PostgreSQL client installed*/
tom@tom-xps:~$ psql postgres://mjejkxwhhvmwop:o-nMAMf3-Z-XRgGSuhMm6i9yUE@ec2-54-204-8-224.compute-1.amazonaws.com:5432/d9iv7in7po4q9k
/*Data Creation queries below*/
CREATE TABLE COMPANIES(
   COMPANYID 	SERIAL PRIMARY KEY		NOT NULL,
   NAME			varchar(60)    		NOT NULL,
   INDUSTRY		varchar(60)     	NOT NULL
);
INSERT INTO COMPANIES (NAME,INDUSTRY) VALUES ('Facebook', 'Social Network');
INSERT INTO COMPANIES (NAME,INDUSTRY) VALUES ('Google' , 'Technology');
INSERT INTO COMPANIES (NAME,INDUSTRY) VALUES ('Airbnb' , 'Travel');
INSERT INTO COMPANIES (NAME,INDUSTRY) VALUES ('Dropbox' , 'Cloud Storage');
INSERT INTO COMPANIES (NAME,INDUSTRY) VALUES ('Heroku' , 'Cloud Platform as a Service');

INSERT INTO "Companies" ("Name","Industry", "Updated") VALUES ('Facebook', 'Social Network', now());

INSERT INTO "Companies" ("Name","Industry", "Updated") VALUES ('Google', 'Technology', now());

INSERT INTO "Companies" ("Name","Industry", "Updated") VALUES ('Airbnb', 'Travel', now());

INSERT INTO "Companies" ("Name","Industry", "Updated") VALUES ('Dropbox', 'Cloud Storage', now());

INSERT INTO "Companies" ("Name","Industry", "Updated") VALUES ('Heroku', 'Cloud Platform as a Service', now());


CREATE TABLE INTERVIEWERS(
   INTERVIEWERID 		SERIAL PRIMARY KEY		NOT NULL,
   INTERVIEWER			varchar(60)    		NOT NULL,
   POSITION				varchar(60)    		NOT NULL,
   COMPANYID			INT 				references COMPANIES(COMPANYID)
   NOT NULL
);
INSERT INTO INTERVIEWERS (INTERVIEWER, POSITION, COMPANYID) VALUES ('Teddy Beachley', 'Software Engineer', 5);
INSERT INTO INTERVIEWERS (INTERVIEWER, POSITION, COMPANYID) VALUES ('Grant McGovern', 'Recruiter', 4);
INSERT INTO INTERVIEWERS (INTERVIEWER, POSITION, COMPANYID) VALUES ('Nick Gulardi', 'CTO', 4);
INSERT INTO INTERVIEWERS (INTERVIEWER, POSITION, COMPANYID) VALUES ('Gaurav Sheni', 'Software Engineer', 2);
INSERT INTO INTERVIEWERS (INTERVIEWER, POSITION, COMPANYID) VALUES ('Berry Jones', 'HR', 3);
INSERT INTO INTERVIEWERS (INTERVIEWER, POSITION, COMPANYID) VALUES ('Tim Jones', 'Software Engineer', 1);

INSERT INTO "Interviewers" ("Interviewer","Position", "CompanyID") VALUES ('Teddy Beachley', 'Software Engineer', 5);
INSERT INTO "Interviewers" ("Interviewer","Position", "CompanyID") VALUES ('Grant McGovern', 'Recruiter', 4); 
INSERT INTO "Interviewers" ("Interviewer","Position", "CompanyID") VALUES ('Nick Gulardi', 'CTO', 4); 
INSERT INTO "Interviewers" ("Interviewer","Position", "CompanyID") VALUES ('Gaurav Sheni', 'Software Engineer', 2); INSERT INTO "Interviewers" ("Interviewer","Position", "CompanyID") VALUES ('Berry Jones', 'HR', 3); 
INSERT INTO "Interviewers" ("Interviewer","Position", "CompanyID") VALUES ('Tim Jones', 'Software Engineer', 1);


CREATE TABLE JOBSTYPES(
   JOBID		SERIAL PRIMARY KEY		NOT NULL,
   JOBPOSITION	varchar(60)				NOT NULL,
   NEWGRAD		boolean					NOT NULL, 
   UNIQUE (JOBPOSITION)	
);
INSERT INTO JOBSTYPES (JOBPOSITION, NEWGRAD) VALUES ('Software Engineer', TRUE);
INSERT INTO JOBSTYPES (JOBPOSITION, NEWGRAD) VALUES ('Quality Tester', FALSE);
INSERT INTO JOBSTYPES (JOBPOSITION, NEWGRAD) VALUES ('Data Scientist', FALSE);
INSERT INTO JOBSTYPES (JOBPOSITION, NEWGRAD) VALUES ('Product Manager', FALSE);

INSERT INTO "JobTypes" ("JobPosition", "NewGrad") VALUES ('Software Engineer', TRUE);
INSERT INTO "JobTypes" ("JobPosition", "NewGrad") VALUES ('Quality Tester', False);
INSERT INTO "JobTypes" ("JobPosition", "NewGrad") VALUES ('Data Scientist', False);
INSERT INTO "JobTypes" ("JobPosition", "NewGrad") VALUES ('Product Manager', False);

CREATE TABLE TOPICS(
   TOPICID		SERIAL PRIMARY KEY			NOT NULL,
   TOPICNAME	varchar(60)				NOT NULL,
   UNIQUE (TOPICNAME)	
);
INSERT INTO TOPICS (TOPICNAME) VALUES ('Coding');
INSERT INTO TOPICS (TOPICNAME) VALUES ('Behavorial');
INSERT INTO TOPICS (TOPICNAME) VALUES ('Brainteaser');

INSERT INTO "Topics" ("TopicName") VALUES ('Coding');
INSERT INTO "Topics" ("TopicName") VALUES ('Behavorial');
INSERT INTO "Topics" ("TopicName") VALUES ('Brainteaser');

CREATE TABLE QUESTIONS(
   QUESTIONID	SERIAL PRIMARY KEY			NOT NULL,
   QUESTION 	TEXT    				NOT NULL,
   JOBID		INT     				references JOBSTYPES(JOBID)			NOT NULL,
   TOPICID		INT 					references TOPICS(TOPICID)			NOT NULL,
   INTERVIEWERID		INT 					references INTERVIEWERS(INTERVIEWERID)			NOT NULL,
   CREATED		TIMESTAMP 			DEFAULT NOW(),
   UPDATED		TIMESTAMP			DEFAULT NOW()
);
INSERT INTO QUESTIONS (QUESTION, JOBID, TOPICID, INTERVIEWERID) VALUES ('What is the JRE and what does it have to do with .jar files?', 1, 1, 1);
INSERT INTO QUESTIONS (QUESTION, JOBID, TOPICID, INTERVIEWERID) VALUES ('What has been your favorite side project?', 1, 2, 1);
INSERT INTO QUESTIONS (QUESTION, JOBID, TOPICID, INTERVIEWERID) VALUES ('How to find if a binary tree was complete (i.e, if all leaf nodes were either at the maximum depth or max depth-1, and were pressed along the left side of the tree)', 2, 1, 5);
INSERT INTO QUESTIONS (QUESTION, JOBID, TOPICID, INTERVIEWERID) VALUES ('Print the largest non-duplicate substring in the given string', 2, 1, 5);
INSERT INTO QUESTIONS (QUESTION, JOBID, TOPICID, INTERVIEWERID) VALUES ('Write a function which finds any integer that appears more than once in our list with regard to space.', 1, 1, 3);
INSERT INTO QUESTIONS (QUESTION, JOBID, TOPICID, INTERVIEWERID) VALUES ('Given a list of words, return the pairs of words that when concatenated form a palindrome in linear time.', 3, 1, 4);
INSERT INTO QUESTIONS (QUESTION, JOBID, TOPICID, INTERVIEWERID) VALUES ('Why are manhole covers round?', 4, 1, 3);

INSERT INTO "Questions" ("Question", "JobID", "TopicID", "InterviewerID", "Created", "Updated") VALUES ('What is the JRE and what does it have to do with .jar files?', 1, 1, 1, now(), now());
INSERT INTO "Questions" ("Question", "JobID", "TopicID", "InterviewerID", "Created", "Updated") VALUES ('What has been your favorite side project?', 1, 2, 1, now(), now());
INSERT INTO "Questions" ("Question", "JobID", "TopicID", "InterviewerID", "Created", "Updated") VALUES ('How to find if a binary tree was complete (i.e, if all leaf nodes were either at the maximum depth or max depth-1, and were pressed along the left side of the tree)', 2, 1, 5, now(), now());
INSERT INTO "Questions" ("Question", "JobID", "TopicID", "InterviewerID", "Created", "Updated") VALUES ('Print the largest non-duplicate substring in the given string', 2, 1, 5, now(), now());
INSERT INTO "Questions" ("Question", "JobID", "TopicID", "InterviewerID", "Created", "Updated") VALUES ('Write a function which finds any integer that appears more than once in our list with regard to space.', 1, 1, 3, now(), now());
INSERT INTO "Questions" ("Question", "JobID", "TopicID", "InterviewerID", "Created", "Updated") VALUES ('Given a list of words, return the pairs of words that when concatenated form a palindrome in linear time.', 3, 1, 4, now(), now());
INSERT INTO "Questions" ("Question", "JobID", "TopicID", "InterviewerID", "Created", "Updated") VALUES ('Why are manhole covers round?', 4, 3, 3, now(), now());


CREATE TABLE ANSWERS(
   ANSWERID 	SERIAL PRIMARY KEY     NOT NULL,
   ANSWER 		TEXT    			NOT NULL,
   QUESTIONID   INT     			references QUESTIONS(QUESTIONID) NOT NULL,
   CREATED		TIMESTAMP 			DEFAULT NOW(),
   UPDATED		TIMESTAMP			DEFAULT NOW()
);

INSERT INTO ANSWERS(ANSWER, QUESTIONID) VALUES ('A circular manhole prevents one from falling into the hole', 7);
INSERT INTO ANSWERS(ANSWER, QUESTIONID) VALUES ('The idea is to use bitwise operators for a solution that is O(n) time and uses O(1) extra space. The solution is not easy like other XOR based solutions, because all elements appear odd number of times here.', 6);
INSERT INTO ANSWERS(ANSWER, QUESTIONID) VALUES ('JRE is the environment within which the virtual machine runs. Java Runtime Environment.', 1);

INSERT INTO "Answers" ("Answer", "QuestionID", "Created", "Updated") VALUES ('A circular manhole prevents one from falling into the hole', 7, now(), now());
INSERT INTO "Answers" ("Answer", "QuestionID", "Created", "Updated") VALUES ('The idea is to use bitwise operators for a solution that is O(n) time and uses O(1) extra space. The solution is not easy like other XOR based solutions, because all elements appear odd number of times here.', 6, now(), now());
INSERT INTO "Answers" ("Answer", "QuestionID", "Created", "Updated") VALUES ('JRE is the environment within which the virtual machine runs. Java Runtime Environment.', 1, now(), now());

/*Website queries below*/

select * from "Companies" inner join (select * from "Interviewers" inner join (select * from "Questions") AS joinB using ("InterviewerID")) AS joinA using ("CompanyID") where "Name" = 'Heroku';

select * from "Companies" inner join (select * from "Interviewers" inner join (select * from "Questions" left outer join (select * from "Answers") AS joinC using ("QuestionID")) AS joinB using ("InterviewerID")) AS joinA using ("CompanyID");

select * from "Topics" inner join(select * from "Questions" left outer join (select * from "Answers") AS joinB using ("QuestionID")) AS joinA using ("TopicID") where "TopicName" = 'Behavorial';

select * from "Companies" inner join (select * from "Interviewers" inner join (select * from "Topics" inner join(select * from "Questions" left outer join (select * from "Answers") AS joinB using ("QuestionID")) AS joinA using ("TopicID")) AS joinC using ("InterviewerID")) AS joinD using ("CompanyID") where "TopicName" = 'Behavorial';

select * from "Companies" inner join (select * from "Interviewers" inner join (select * from "Topics" inner join(select * from "JobTypes" inner join (select * from "Questions" left outer join (select * from "Answers") AS joinC using ("QuestionID")) AS joinA using ("JobID")) AS joinB using ("TopicID")) AS joinD using ("InterviewerID")) AS joinE using ("CompanyID") where "JobPosition" = 'Software Engineer';
